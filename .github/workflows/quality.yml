name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Type checking
      run: bun run typecheck

    - name: ESLint checking
      run: bun run lint

    - name: Prettier formatting check
      run: bun run format --check

    - name: Run tests
      run: bun run test

    - name: Generate coverage report
      run: bun run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Security audit
      run: bun audit

    - name: Check bundle size
      run: bun run build

  mutation-testing:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Run mutation testing
      run: bun run test:mutation

    - name: Upload mutation report
      uses: actions/upload-artifact@v3
      with:
        name: mutation-report
        path: reports/mutation/

  performance-tests:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build packages
      run: bun run build

    - name: Run performance benchmarks
      run: bun run test:performance

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance/

  quality-metrics:
    runs-on: ubuntu-latest
    needs: [quality-checks, mutation-testing]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Generate quality metrics
      run: |
        echo "## Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Count lines of code
        echo "### Code Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Total lines: $(find . -name '*.ts' -not -path './node_modules/*' -not -path './dist/*' | xargs wc -l | tail -1)" >> $GITHUB_STEP_SUMMARY

        # Count test files
        echo "- Test files: $(find . -name '*.test.ts' -not -path './node_modules/*' | wc -l)" >> $GITHUB_STEP_SUMMARY

        # TypeScript compilation
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Compilation Status" >> $GITHUB_STEP_SUMMARY
        if bun run typecheck; then
          echo "✅ TypeScript: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ TypeScript: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

        # ESLint status
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
        if bun run lint; then
          echo "✅ ESLint: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ ESLint: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

        # Test coverage
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        bun run test:coverage --silent | grep -E "(All files|statements|branches|functions|lines)" >> $GITHUB_STEP_SUMMARY

  notify:
    runs-on: ubuntu-latest
    needs: [quality-checks, mutation-testing, performance-tests, quality-metrics]
    if: always()

    steps:
    - name: Notify quality status
      uses: actions/github-script@v6
      with:
        script: |
          const status = needs.quality-checks.result === 'success' ?
                       '✅ PASSED' : '❌ FAILED';

          console.log(`## Quality Gates Status: ${status}`);

          if (needs.quality-checks.result !== 'success') {
            core.setFailed('Quality gates failed');
          }