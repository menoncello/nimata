{
  "name": "web",
  "description": "React single-page web application with Vite",
  "version": "1.0.0",
  "supportedProjectTypes": ["web"],
  "variables": [
    {
      "name": "name",
      "type": "string",
      "description": "Project name",
      "required": true
    },
    {
      "name": "description",
      "type": "string",
      "description": "Project description",
      "required": false,
      "default": ""
    },
    {
      "name": "author",
      "type": "string",
      "description": "Project author",
      "required": false,
      "default": ""
    },
    {
      "name": "license",
      "type": "string",
      "description": "Project license",
      "required": false,
      "default": "MIT"
    },
    {
      "name": "qualityLevel",
      "type": "select",
      "description": "Code quality level",
      "required": true,
      "default": "medium"
    },
    {
      "name": "aiAssistants",
      "type": "multiselect",
      "description": "AI assistants to configure",
      "required": true,
      "default": ["claude-code"]
    },
    {
      "name": "year",
      "type": "string",
      "description": "Current year",
      "required": false,
      "default": "{{helper:year}}"
    }
  ],
  "files": [
    {
      "path": "package.json",
      "template": "{\n  \"name\": \"{{name}}\",\n  \"version\": \"1.0.0\",\n  \"description\": \"{{description}}\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"bun test\",\n    \"test:unit\": \"bun test tests/unit/\",\n    \"test:integration\": \"bun test tests/integration/\",\n    \"test:coverage\": \"bun test --coverage\",\n    \"test:watch\": \"bun test --watch\",\n    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"tests/**/*.{ts,tsx}\\\"\",\n    \"lint:fix\": \"eslint \\\"src/**/*.{ts,tsx}\\\" \\\"tests/**/*.{ts,tsx}\\\" --fix\",\n    \"format\": \"prettier --write \\\"src/**/*.{ts,tsx}\\\" \\\"tests/**/*.{ts,tsx}\\\"\",\n    \"format:check\": \"prettier --check \\\"src/**/*.{ts,tsx}\\\" \\\"tests/**/*.{ts,tsx}\\\"\",\n    \"clean\": \"rm -rf dist node_modules coverage\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.43\",\n    \"@types/react-dom\": \"^18.2.17\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.14.0\",\n    \"@typescript-eslint/parser\": \"^6.14.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"@testing-library/react\": \"^14.1.2\",\n    \"@testing-library/jest-dom\": \"^6.1.5\",\n    \"eslint\": \"^8.55.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.5\",\n    \"jsdom\": \"^23.0.1\",\n    \"prettier\": \"^3.1.0\",\n    \"typescript\": \"^5.2.2\",\n    \"vite\": \"^5.0.8\"\n  },\n  \"engines\": {\n    \"bun\": \">=1.3.0\",\n    \"node\": \">=18.0.0\"\n  },\n  \"keywords\": [\n    \"web\",\n    \"react\",\n    \"vite\",\n    \"spa\",\n    \"{{helper:kebabCase name}}\"\n  ],\n  \"author\": \"{{author}}\",\n  \"license\": \"{{license}}\"\n}",
      "permissions": "644"
    },
    {
      "path": "tsconfig.json",
      "template": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": {{#if (eq qualityLevel 'strict')}}true{{else}}false{{/if}},\n    \"noUnusedLocals\": {{#if (eq qualityLevel 'strict')}}true{{else}}false{{/if}},\n    \"noUnusedParameters\": {{#if (eq qualityLevel 'strict')}}true{{else}}false{{/if}},\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}",
      "permissions": "644"
    },
    {
      "path": "src/index.ts",
      "template": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { App } from './App.js';\nimport './styles/main.css';\n\n/**\n * Initialize and render the React application\n */\nfunction initializeApp(): void {\n  const container = document.getElementById('root');\n  if (!container) {\n    throw new Error('Root container not found');\n  }\n\n  const root = createRoot(container);\n  root.render(\n    <StrictMode>\n      <App />\n    </StrictMode>\n  );\n}\n\n// Initialize the application\ninitializeApp();\n\nexport { initializeApp };",
      "permissions": "644"
    },
    {
      "path": "src/App.tsx",
      "template": "/**\n * {{helper:pascalCase name}} React Application\n *\n * {{description}}\n *\n * @author {{author}}\n * @license {{license}}\n * @version 1.0.0\n * @since {{year}}\n */\n\nimport './styles/main.css';\n\n/**\n * Main App component\n */\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Welcome to {{helper:pascalCase name}}</h1>\n      </header>\n      <main>\n        <p>Your React application is ready!</p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;",
      "permissions": "644"
    },
    {
      "path": "src/styles/main.css",
      "template": "/* Main styles for {{name}} */\n\n.app {\n  text-align: center;\n}\n\nh1 {\n  color: #2c3e50;\n  margin-bottom: 1rem;\n}\n\np {\n  color: #7f8c8d;\n  font-size: 1.1rem;\n}",
      "permissions": "644"
    },
    {
      "path": "vite.config.ts",
      "template": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n});",
      "permissions": "644"
    },
    {
      "path": "tsconfig.node.json",
      "template": "{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"skipLibCheck\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}",
      "permissions": "644"
    },
    {
      "path": "tests/App.test.tsx",
      "template": "/**\n * Tests for App component\n */\n\nimport { describe, it, expect } from 'bun:test';\nimport { render, screen } from '@testing-library/react';\nimport App from '../src/App';\n\ndescribe('{{helper:pascalCase name}} App', () => {\n  it('should render without crashing', () => {\n    render(<App />);\n  });\n  \n  it('should display welcome message', () => {\n    render(<App />);\n    expect(screen.getByText('Welcome to {{helper:pascalCase name}}')).toBeInTheDocument();\n  });\n  \n  it('should display ready message', () => {\n    render(<App />);\n    expect(screen.getByText('Your React application is ready!')).toBeInTheDocument();\n  });\n});",
      "permissions": "644"
    },
    {
      "path": ".env.example",
      "template": "# Environment Variables for {{name}}\nVITE_APP_TITLE={{helper:pascalCase name}}\nVITE_APP_DESCRIPTION={{description}}\n\n# API Configuration\n# VITE_API_URL=http://localhost:3001/api\n\n# Feature Flags\n# VITE_ENABLE_ANALYTICS=true\n# VITE_ENABLE_DEBUG=false",
      "permissions": "644"
    },
    {
      "path": "src/components/.gitkeep",
      "template": "# Frontend components directory\n# This directory contains React/Vue/Angular components",
      "permissions": "644"
    },
    {
      "path": "src/utils/.gitkeep",
      "template": "# Frontend utilities directory\n# This directory contains utility functions and helpers",
      "permissions": "644"
    },
    {
      "path": "public/.gitkeep",
      "template": "# Public assets directory\n# This directory contains static assets like images, fonts, etc.",
      "permissions": "644"
    },
    {
      "path": "tests/unit/components/.gitkeep",
      "template": "# Frontend component tests directory\n# This directory contains unit tests for frontend components",
      "permissions": "644"
    },
    {
      "path": "index.html",
      "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>{{name}}</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/index.ts\"></script>\n  </body>\n</html>",
      "permissions": "644"
    },
    {
      "path": "public/styles.css",
      "template": "/* Public styles for {{name}} */\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  line-height: 1.6;\n  color: #333;\n}\n\n.app {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\nheader {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-bottom: 1px solid #dee2e6;\n}\n\nmain {\n  flex: 1;\n  padding: 2rem;\n}",
      "permissions": "644"
    },
    {
      "path": "README.md",
      "template": "# {{helper:pascalCase name}}\n\n{{description}}\n\n## Features\n\n- ‚ö° Vite for fast development and building\n- ‚öõÔ∏è React 18 with TypeScript\n- üé® Modern CSS with component-based styling\n- üß™ Testing with React Testing Library\n- üîç ESLint with React-specific rules\n- üì¶ Prettier for consistent code formatting\n- üèóÔ∏è TypeScript with strict type checking\n\n## Installation\n\n```bash\n# Install dependencies\nbun install\n\n# Copy environment file\ncp .env.example .env\n\n# Configure your environment variables\nnano .env\n```\n\n## Development\n\n```bash\n# Start development server with hot reload\nbun run dev\n\n# Type checking\nbun run typecheck\n\n# Run tests\nbun test\n\n# Run tests with coverage\nbun run test:coverage\n\n# Linting\nbun run lint\n\n# Formatting\nbun run format\n```\n\n## Building\n\n```bash\n# Build for production\nbun run build\n\n# Preview production build\nbun run preview\n```\n\n## Project Structure\n\n```\nsrc/\n‚îú‚îÄ‚îÄ components/         # React components\n‚îú‚îÄ‚îÄ styles/            # CSS and styling\n‚îÇ   ‚îî‚îÄ‚îÄ main.css       # Main stylesheet\n‚îú‚îÄ‚îÄ App.tsx            # Main App component\n‚îî‚îÄ‚îÄ index.ts           # Application entry point\ntests/\n‚îú‚îÄ‚îÄ unit/              # Unit tests\n‚îú‚îÄ‚îÄ integration/       # Integration tests\n‚îî‚îÄ‚îÄ App.test.tsx       # App component tests\n```\n\n## Components\n\n### App Component\n\nThe main application component located in `src/App.tsx`.\n\n### Styling\n\n- Global styles in `src/styles/main.css`\n- Component-specific styles can be added as CSS modules\n\n### Testing\n\nTests are written using:\n- **Bun** as the test runner\n- **React Testing Library** for component testing\n- **Jest DOM** for additional DOM matchers\n\nExample test:\n\n```tsx\nimport { render, screen } from '@testing-library/react';\nimport App from '../src/App';\n\ntest('renders welcome message', () => {\n  render(<App />);\n  expect(screen.getByText(/Welcome to {{name}}/i)).toBeInTheDocument();\n});\n```\n\n## Environment Variables\n\nThe project supports environment variables with the `VITE_` prefix:\n\n```bash\n# App configuration\nVITE_APP_TITLE={{helper:pascalCase name}}\nVITE_APP_DESCRIPTION={{description}}\n\n# API Configuration\nVITE_API_URL=http://localhost:3001/api\n\n# Feature flags\nVITE_ENABLE_ANALYTICS=true\nVITE_ENABLE_DEBUG=false\n```\n\n## Available Scripts\n\n| Script | Description |\n|--------|-------------|\n| `bun run dev` | Start development server |\n| `bun run build` | Build for production |\n| `bun run preview` | Preview production build |\n| `bun run typecheck` | Run TypeScript compiler |\n| `bun test` | Run all tests |\n| `bun test:unit` | Run unit tests only |\n| `bun test:integration` | Run integration tests only |\n| `bun test:coverage` | Run tests with coverage |\n| `bun test:watch` | Run tests in watch mode |\n| `bun run lint` | Run ESLint |\n| `bun run lint:fix` | Fix linting issues automatically |\n| `bun run format` | Format code with Prettier |\n| `bun run format:check` | Check code formatting |\n| `bun run clean` | Clean build artifacts and dependencies |\n\n## Learn More\n\n- [Vite Documentation](https://vitejs.dev/)\n- [React Documentation](https://react.dev/)\n- [TypeScript Documentation](https://www.typescriptlang.org/)\n- [Bun Documentation](https://bun.sh/docs)\n\n## License\n\n{{license}} ¬© {{year}} {{author}}",
      "permissions": "644"
    }
  ]
}
