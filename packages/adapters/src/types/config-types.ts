/**
 * Configuration Types
 *
 * Type definitions for various configuration files generated by the project
 */

export interface PackageJsonConfig {
  name: string;
  version: string;
  description?: string;
  main?: string;
  types?: string;
  bin?: Record<string, string>;
  scripts?: Record<string, string>;
  keywords?: string[];
  author?: string;
  license?: string;
  engines?: {
    node?: string;
    npm?: string;
  };
  devDependencies?: Record<string, string>;
  dependencies?: Record<string, string>;
}

export interface TypeScriptCompilerOptions {
  target?: string;
  module?: string;
  moduleResolution?: string;
  outDir?: string;
  rootDir?: string;
  allowSyntheticDefaultImports?: boolean;
  esModuleInterop?: boolean;
  experimentalDecorators?: boolean;
  emitDecoratorMetadata?: boolean;
  skipLibCheck?: boolean;
  strict?: boolean;
  noImplicitAny?: boolean;
  strictNullChecks?: boolean;
  strictFunctionTypes?: boolean;
  noImplicitReturns?: boolean;
  noFallthroughCasesInSwitch?: boolean;
  noUncheckedIndexedAccess?: boolean;
  exactOptionalPropertyTypes?: boolean;
  noImplicitOverride?: boolean;
  noPropertyAccessFromIndexSignature?: boolean;
  allowUnusedLabels?: boolean;
  allowUnreachableCode?: boolean;
  declaration?: boolean;
  declarationMap?: boolean;
  sourceMap?: boolean;
  removeComments?: boolean;
  importHelpers?: boolean;
  forceConsistentCasingInFileNames?: boolean;
  resolveJsonModule?: boolean;
  isolatedModules?: boolean;
  verbatimModuleSyntax?: boolean;
  noEmit?: boolean;
  incremental?: boolean;
  tsBuildInfoFile?: string;
  [key: string]: unknown; // Allow additional properties
}

export interface TypeScriptConfig {
  compilerOptions: TypeScriptCompilerOptions;
  include: string[];
  exclude: string[];
  'ts-node'?: {
    esm: boolean;
    experimentalSpecifierResolution: string;
  };
}

export interface EslintEnvConfig {
  node?: boolean;
  es2022?: boolean;
  jest?: boolean;
  browser?: boolean;
}

export interface EslintExtendsConfig {
  eslint: string[];
  typescript: string[];
}

export interface EslintParserConfig {
  ['@typescript-eslint/parser']: {
    ecmaVersion: number;
    sourceType: string;
    project: string;
  };
}

export type EslintRulesConfig = Record<string, unknown>;

export interface EslintConfig {
  root: boolean;
  env: EslintEnvConfig;
  extends: string[];
  parser: string;
  parserOptions: {
    ecmaVersion: number;
    sourceType: string;
    project: string;
  };
  plugins: string[];
  rules: EslintRulesConfig;
  ignorePatterns: string[];
}

export interface ClaudeConfig {
  project: {
    name: string;
    description?: string;
    type: string;
  };
  code: {
    style: {
      language: string;
      framework: string;
      testing: string;
      linting: string;
      formatting: string;
    };
    conventions: {
      fileNaming: string;
      componentNaming: string;
      testNaming: string;
    };
  };
  ai: {
    model: string;
    temperature: number;
    maxTokens: number;
    contextWindow: number;
  };
  rules: string[];
}

export interface CopilotConfig {
  version: number;
  config: {
    ide: {
      preferredLanguage: string;
      preferredFramework: string;
    };
    preferences: {
      enableCodeSuggestions: boolean;
      enableInlineCompletion: boolean;
      enableExplanation: boolean;
    };
  };
}

export interface VitestEnvironmentConfig {
  jsdom?: {
    happyDOM?: {
      url?: string;
      referrer?: string;
      contentType?: string;
      userAgent?: string;
      width?: number;
      height?: number;
      deviceScaleFactor?: number;
    };
  };
}

export interface VitestConfig {
  test: {
    environment: string;
    globals: boolean;
    setupFiles: string[];
    coverage: {
      provider: string;
      reporter: string[];
      exclude: string[];
      include: string[];
      thresholds: {
        global: {
          branches: number;
          functions: number;
          lines: number;
          statements: number;
        };
      };
    };
    reporters: string[];
    silent: boolean;
    watchExclude: string[];
    testTimeout: number;
    hookTimeout: number;
    clearMocks: boolean;
    restoreMocks: boolean;
    mockReset: boolean;
    environmentOptions?: VitestEnvironmentConfig;
  };
}

export interface CommandOption {
  flags: string;
  description: string;
  defaultValue?: unknown;
}

export interface CommandDefinition {
  name: string;
  description: string;
  arguments: string[];
  options: CommandOption[];
  action: (projectName: string | undefined, options: unknown) => Promise<void>;
}

// Forward declaration for StepProgressIndicator class
export interface StepProgressIndicatorInterface {
  start: (steps: unknown[], label: string) => void;
  complete: (message?: string) => void;
  error: (message?: string) => void;
  fail: (message?: string) => void;
  next: (message?: string) => void;
  nextStep: () => void;
  update: (percent: number, message?: string) => void;
  increment: (message?: string) => void;
}

// Missing types for AI context generators
export type TargetEnvironment = 'node' | 'browser' | 'react-native' | 'electron' | 'deno';
export type QualityLevel = 'light' | 'medium' | 'strict';
export type ProjectType = 'basic' | 'web' | 'cli' | 'library';
export type AIAssistant = 'claude-code' | 'copilot';

export interface AIContextConfigOptions {
  qualityLevel: QualityLevel;
  projectType: ProjectType;
  targetEnvironment: TargetEnvironment;
  projectName: string;
  projectDescription?: string;
  codeStyle: CodeStyleConfig;
  testing: boolean;
  frameworks: string[];
  aiAssistants: AIAssistant[];
}

export interface CodeStyleConfig {
  indentSize: number;
  useTabs: boolean;
  semi: boolean;
  singleQuote: boolean;
  printWidth: number;
  trailingComma: 'none' | 'es5' | 'all';
  [key: string]: unknown;
}

export interface PerformanceMetrics {
  startTime: number;
  endTime: number;
  duration: number;
  memoryUsage: number;
  cacheHits: number;
  cacheMisses: number;
}

export interface CacheOptions {
  maxSize: number;
  ttl: number;
  key: string;
}
