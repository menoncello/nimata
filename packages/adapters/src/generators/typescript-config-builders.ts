/**
 * TypeScript Configuration Builders
 *
 * Helper methods for building TypeScript configuration content
 */

import { JSON_SERIALIZATION } from '../utils/constants.js';
import type { TypeScriptConfigOptions, CompilerOptions } from './typescript-generator.js';

/**
 * Build main TypeScript configuration content
 * @param options - TypeScript configuration options
 * @param getCompilerOptions - Function to get compiler options
 * @param getIncludePatterns - Function to get include patterns
 * @param getExcludePatterns - Function to get exclude patterns
 * @returns Main TypeScript configuration content
 */
export function buildMainConfigContent(
  options: TypeScriptConfigOptions,
  getCompilerOptions: (options: TypeScriptConfigOptions) => CompilerOptions,
  getIncludePatterns: (options: TypeScriptConfigOptions) => string[],
  getExcludePatterns: (options: TypeScriptConfigOptions) => string[]
): string {
  const compilerOptions = getCompilerOptions(options);
  const includePatterns = getIncludePatterns(options);
  const excludePatterns = getExcludePatterns(options);

  return `{
  "extends": "./tsconfig.base.json",
  "compilerOptions": ${JSON.stringify(compilerOptions, null, JSON_SERIALIZATION.PRETTY_INDENT)},
  "include": [
    ${includePatterns.map((pattern) => `"${pattern}"`).join(',\n    ')}
  ],
  "exclude": [
    ${excludePatterns.map((pattern) => `"${pattern}"`).join(',\n    ')}
  ]
}`;
}

/**
 * Build TSC TypeScript configuration content
 * @param options - TypeScript configuration options
 * @param getCompilerOptions - Function to get compiler options
 * @param getIncludePatterns - Function to get include patterns
 * @param getExcludePatterns - Function to get exclude patterns
 * @returns TSC TypeScript configuration content
 */
export function buildTscConfigContent(
  options: TypeScriptConfigOptions,
  getCompilerOptions: (options: TypeScriptConfigOptions) => CompilerOptions,
  getIncludePatterns: (options: TypeScriptConfigOptions) => string[],
  getExcludePatterns: (options: TypeScriptConfigOptions) => string[]
): string {
  const compilerOptions = {
    ...getCompilerOptions(options),
    outDir: './dist',
    rootDir: './src',
    sourceMap: true,
    declaration: true,
    declarationMap: true,
  };
  const includePatterns = getIncludePatterns(options);
  const excludePatterns = getExcludePatterns(options);

  return `{
  "compilerOptions": ${JSON.stringify(compilerOptions, null, JSON_SERIALIZATION.PRETTY_INDENT)},
  "include": [
    ${includePatterns.map((pattern) => `"${pattern}"`).join(',\n    ')}
  ],
  "exclude": [
    ${excludePatterns.map((pattern) => `"${pattern}"`).join(',\n    ')}
  ]
}`;
}

/**
 * Build TSC types configuration content
 * @param options - TypeScript configuration options
 * @param getCompilerOptions - Function to get compiler options
 * @returns TSC types configuration content
 */
export function buildTscTypesConfigContent(
  options: TypeScriptConfigOptions,
  getCompilerOptions: (options: TypeScriptConfigOptions) => CompilerOptions
): string {
  const compilerOptions = {
    ...getCompilerOptions(options),
    outDir: './dist',
    rootDir: './src',
    sourceMap: true,
    declaration: true,
    declarationMap: true,
    emitDeclarationOnly: true,
  };

  return `{
  "compilerOptions": ${JSON.stringify(compilerOptions, null, JSON_SERIALIZATION.PRETTY_INDENT)},
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/*.test.ts",
    "**/*.spec.ts"
  ]
}`;
}

/**
 * Build ESBuild configuration header
 * @param projectType - Project type
 * @param getProjectTypeName - Function to get project type name
 * @returns ESBuild configuration header
 */
export function buildEsbuildConfigHeader(
  projectType: string,
  getProjectTypeName: (projectType: string) => string
): string {
  return `/**
 * ESBuild Configuration for ${getProjectTypeName(projectType)}
 * Generated by NÃ¬mata CLI
 */

import { build } from 'esbuild';

const isWatchMode = process.argv.includes('--watch');`;
}

/**
 * Build ESBuild configuration sections
 * @param options - TypeScript configuration options
 * @param getESBuildBaseConfig - Function to get ESBuild base config
 * @param getESBuildDefines - Function to get ESBuild defines
 * @param getESBuildPlugins - Function to get ESBuild plugins
 * @returns ESBuild configuration sections
 */
export function buildEsbuildConfigSections(
  options: TypeScriptConfigOptions,
  getESBuildBaseConfig: (options: TypeScriptConfigOptions) => string,
  getESBuildDefines: (options: TypeScriptConfigOptions) => string,
  getESBuildPlugins: () => string
): string {
  return `${getESBuildBaseConfig(options)};

${getESBuildDefines(options)};

${getESBuildPlugins()};`;
}

/**
 * Build ESBuild watch configuration
 * @returns ESBuild watch configuration
 */
export function buildEsbuildWatchConfig(): string {
  return `if (isWatchMode) {
  config.watch = {
    onRebuild(error, result) {
      if (error) {
        console.error('watch build failed:', error);
      } else {
        console.log('watch build succeeded');
      }
    }
  };
}`;
}

/**
 * Build ESBuild execution block
 * @returns ESBuild execution block
 */
export function buildEsbuildExecutionBlock(): string {
  return `try {
  await build(config);
} catch (error) {
  console.error('Build failed:', error);
  process.exit(1);
}`;
}

/**
 * ESBuild helper functions configuration
 */
interface ESBuildHelpers {
  getProjectTypeName: (projectType: string) => string;
  getESBuildBaseConfig: (options: TypeScriptConfigOptions) => string;
  getESBuildDefines: (options: TypeScriptConfigOptions) => string;
  getESBuildPlugins: () => string;
}

/**
 * Build ESBuild configuration content
 * @param options - TypeScript configuration options
 * @param helpers - ESBuild helper functions
 * @returns ESBuild configuration content
 */
export function buildEsbuildConfigContent(
  options: TypeScriptConfigOptions,
  helpers: ESBuildHelpers
): string {
  const header = buildEsbuildConfigHeader(options.projectType, helpers.getProjectTypeName);
  const sections = buildEsbuildConfigSections(
    options,
    helpers.getESBuildBaseConfig,
    helpers.getESBuildDefines,
    helpers.getESBuildPlugins
  );
  const watchConfig = buildEsbuildWatchConfig();
  const execution = buildEsbuildExecutionBlock();

  return `${header}

${sections}

const config = {
  ...baseConfig,
  logLevel: 'info',
  color: true
};

${watchConfig}

${execution}
`;
}

/**
 * Get testing compiler options
 * @param options - TypeScript configuration options
 * @param getCompilerOptions - Function to get base compiler options
 * @returns Testing compiler options
 */
function getTestingCompilerOptions(
  options: TypeScriptConfigOptions,
  getCompilerOptions: (options: TypeScriptConfigOptions) => CompilerOptions
): CompilerOptions {
  return {
    ...getCompilerOptions(options),
    types: ['node', 'bun-test'],
    esModuleInterop: true,
    allowSyntheticDefaultImports: true,
    skipLibCheck: true,
    noEmit: true,
  };
}

/**
 * Build testing TypeScript configuration content
 * @param options - TypeScript configuration options
 * @param getCompilerOptions - Function to get compiler options
 * @returns Testing TypeScript configuration content
 */
export function buildTestingConfigContent(
  options: TypeScriptConfigOptions,
  getCompilerOptions: (options: TypeScriptConfigOptions) => CompilerOptions
): string {
  const compilerOptions = getTestingCompilerOptions(options, getCompilerOptions);

  return `{
  "extends": "./tsconfig.base.json",
  "compilerOptions": ${JSON.stringify(compilerOptions, null, JSON_SERIALIZATION.PRETTY_INDENT)},
  "include": [
    "tests/**/*.ts",
    "**/*.test.ts",
    "**/*.spec.ts",
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "coverage"
  ],
  "ts-node": {
    "esm": true
  }
}
`;
}

/**
 * Build base TypeScript configuration content
 * @param options - TypeScript configuration options
 * @param getCompilerOptions - Function to get compiler options
 * @returns Base TypeScript configuration content
 */
export function buildBaseConfigContent(
  options: TypeScriptConfigOptions,
  getCompilerOptions: (options: TypeScriptConfigOptions) => CompilerOptions
): string {
  const compilerOptions = getCompilerOptions(options);

  return `{
  "compilerOptions": ${JSON.stringify(compilerOptions, null, JSON_SERIALIZATION.PRETTY_INDENT)},
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "coverage",
    "**/*.test.ts",
    "**/*.spec.ts"
  ]
}`;
}
