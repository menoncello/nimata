/**
 * Core CLAUDE.md Helper Functions
 *
 * Extracted from ClaudeMdGenerator to reduce file size while preserving exact behavior
 */

import {
  CLAUDE_MD_CONSTANTS,
  ESLINT_CRITICAL_RULES,
  MUTATION_THRESHOLDS,
  CODE_STYLE_REQUIREMENTS,
} from './claude-md-constants.js';
import { getEnvironmentName, getTargetEnvironment } from './claude-md-helpers.js';
import type { ProjectConfig, ClaudeMdConfigOptions, QualityLevel } from './claude-md-types.js';

/**
 * Build header section
 * @param config - Project configuration
 * @returns Header section string
 */
export function buildHeader(config: ProjectConfig): string {
  const projectTypeNames = {
    basic: 'Basic Application',
    web: 'Web Application',
    cli: 'CLI Application',
    library: 'Library Package',
  };

  const descriptionSection = config.description
    ? `> ${config.description}`
    : 'A project configured for Claude Code assistant integration';

  return `# ${config.name}

${descriptionSection}

## Project Overview

- **Name**: ${config.name}
- **Project Type**: ${projectTypeNames[config.projectType as keyof typeof projectTypeNames] || config.projectType}
- **Environment**: ${getEnvironmentName(getTargetEnvironment(config.projectType || 'basic'))}
- **Quality Level**: ${config.qualityLevel}
- **AI Assistants**: ${config.aiAssistants.join(', ')}`;
}

/**
 * Build testing section
 * @param options - Configuration options
 * @param getCoverageThreshold - Function to get coverage threshold
 * @returns Testing section string
 */
export function buildTestingSection(
  options: ClaudeMdConfigOptions,
  getCoverageThreshold: (qualityLevel: QualityLevel) => number
): string {
  const coverageThreshold = getCoverageThreshold(options.qualityLevel);

  return `## Testing

${
  options.enableTesting
    ? `
- Run tests with \`npm test\`
- Target coverage: ${coverageThreshold}%
- Use Vitest for unit testing
- Use ESLint for code quality
- Use Prettier for code formatting
`
    : '- Testing disabled'
}

## Code Quality Standards

- **Coverage Threshold**: ${coverageThreshold}%
- **Quality Level**: ${options.qualityLevel}
- **TypeScript**: ${options.enableTypeScript ? 'Enabled' : 'Disabled'}`;
}

/**
 * Get coverage threshold based on quality level
 * @param qualityLevel - Quality level
 * @returns Coverage threshold number
 */
export function getCoverageThreshold(qualityLevel: QualityLevel): number {
  switch (qualityLevel) {
    case 'light':
      return CLAUDE_MD_CONSTANTS.COVERAGE_THRESHOLD.LIGHT;
    case 'medium':
      return CLAUDE_MD_CONSTANTS.COVERAGE_THRESHOLD.MEDIUM;
    case 'strict':
      return CLAUDE_MD_CONSTANTS.COVERAGE_THRESHOLD.STRICT;
    default:
      return CLAUDE_MD_CONSTANTS.COVERAGE_THRESHOLD.DEFAULT;
  }
}

/**
 * Build key dependencies section
 * @param config - Project configuration
 * @returns Key dependencies section string
 */
export function buildKeyDependenciesSection(config: ProjectConfig): string {
  const basicDependencies = ['typescript', 'eslint', 'prettier', 'vitest'];

  return `## Key Dependencies

${basicDependencies.map((dep: string) => `- ${dep}`).join('\n')}

## Claude Code Integration

This project is optimized for Claude Code with:

- Proper project structure
- Comprehensive documentation
- Type safety${config.aiAssistants.includes('claude-code') ? ' (Claude Code enabled)' : ''}
- Development guidelines${config.aiAssistants.includes('copilot') ? ' (GitHub Copilot compatible)' : ''}`;
}

/**
 * Build generation timestamp section
 * @param date - Date string
 * @returns Generation timestamp section string
 */
export function buildGenerationTimestamp(date: string): string {
  return `**Generated**: ${date}`;
}

/**
 * Build footer section
 * @returns Footer section string
 */
export function buildFooter(): string {
  return `---

*This CLAUDE.md file was automatically generated by NÃ¬mata CLI.*
*Modify with care, as changes may be overwritten during regeneration.*`;
}

/**
 * Build language requirements section
 * @returns Language requirements section string
 */
export function buildLanguageRequirementsSection(): string {
  return `## Language Requirements

All code, code comments, and technical documentation MUST be written in **English**.

- **Code**: English only
- **Code comments**: English only
- **Technical documentation** (README files, API docs, inline docs, etc.): English only
- **Commit messages**: English only
- **Pull request descriptions**: English only`;
}

/**
 * Build code style configuration
 * @param qualityLevel - Quality level
 * @returns Code style configuration
 */
export function buildCodeStyleConfiguration(qualityLevel: QualityLevel): {
  indentSize: number;
  useTabs: boolean;
  semi: boolean;
  singleQuote: boolean;
  trailingComma: string;
  printWidth: number;
} {
  return {
    indentSize: CLAUDE_MD_CONSTANTS.CODE_STYLE.DEFAULT_INDENT_SIZE,
    useTabs: false,
    semi: true,
    singleQuote: true,
    trailingComma: (() => {
      if (qualityLevel === 'light') return 'none';
      if (qualityLevel === 'strict') return 'all';
      return 'es5';
    })(),
    printWidth: getPrintWidth(qualityLevel),
  };
}

/**
 * Get print width based on quality level
 * @param qualityLevel - Quality level
 * @returns Print width number
 */
function getPrintWidth(qualityLevel: QualityLevel): number {
  switch (qualityLevel) {
    case 'light':
      return CLAUDE_MD_CONSTANTS.CODE_STYLE.LIGHT_PRINT_WIDTH;
    case 'medium':
      return CLAUDE_MD_CONSTANTS.CODE_STYLE.MEDIUM_PRINT_WIDTH;
    case 'strict':
      return CLAUDE_MD_CONSTANTS.CODE_STYLE.STRICT_PRINT_WIDTH;
    default:
      return CLAUDE_MD_CONSTANTS.CODE_STYLE.DEFAULT_PRINT_WIDTH;
  }
}

/**
 * Build ESLint rules section
 * @param options - Configuration options
 * @returns ESLint rules section string
 */
export function buildEslintRulesSection(options: ClaudeMdConfigOptions): string {
  const codeStyleConfig = buildCodeStyleConfiguration(options.qualityLevel);
  const trailingCommaText = (() => {
    if (codeStyleConfig.trailingComma === 'none') return 'none';
    if (codeStyleConfig.trailingComma === 'all') return 'all';
    return 'es5';
  })();
  const lineWidthText = `Maximum ${codeStyleConfig.printWidth} characters`;

  return `### ESLint Rules

${ESLINT_CRITICAL_RULES}

${MUTATION_THRESHOLDS}

${CODE_STYLE_REQUIREMENTS}

- **Semicolons**: Required
- **Trailing commas**: ${trailingCommaText}
- **Line length**: ${lineWidthText}

### Testing Requirements

- Maintain ${options.enableTypeScript ? '90%' : '85%'} test coverage
- Write tests for all public methods and functions
- Test both success and error scenarios
- Use descriptive test names
- Mock external dependencies in tests
- **Test files**: Use \`.test.ts\` or \`.spec.ts\` suffix
- **Framework**: Vitest with TypeScript support
- **Coverage**: Minimum ${(() => {
    if (options.qualityLevel === 'light') return '70';
    if (options.qualityLevel === 'strict') return '95';
    if (options.qualityLevel === 'medium') return options.enableTypeScript ? '90' : '85';
    return '85';
  })()}% required for all tests`;
}
