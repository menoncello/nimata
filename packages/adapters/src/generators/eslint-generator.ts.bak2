/**
 * ESLint Configuration Generator
 *
 * Generates ESLint configuration files based on project quality level and requirements
 */

import { FORMATTING, JSON_SERIALIZATION } from '../utils/constants.js';

// Inline type to avoid import issues
interface ProjectConfig {
  name: string;
  description?: string;
  qualityLevel: 'light' | 'medium' | 'strict';
  projectType: 'basic' | 'web' | 'cli' | 'library';
  aiAssistants: Array<'claude-code' | 'copilot'>;
}

export interface ESLintConfigOptions {
  qualityLevel: 'light' | 'medium' | 'strict';
  projectType: 'basic' | 'web' | 'cli' | 'library';
  targetEnvironment: 'node' | 'browser' | 'both';
  enableTypeScript: boolean;
  enableTesting: boolean;
  customRules?: Record<string, unknown>;
}

export interface GeneratedESLintConfig {
  filename: string;
  content: string;
  description: string;
}

/**
 * ESLint Configuration Generator
 */
export class ESLintGenerator {
  /**
   * Generate ESLint configuration for a project
   *
   * @param config - Project configuration
   * @returns Generated ESLint configuration files
   */
  generate(config: ProjectConfig): GeneratedESLintConfig[] {
    const options: ESLintConfigOptions = {
      qualityLevel: config.qualityLevel,
      projectType: config.projectType,
      targetEnvironment: this.getTargetEnvironment(config.projectType),
      enableTypeScript: true,
      enableTesting: true,
    };

    const configs: GeneratedESLintConfig[] = [];

    // Generate main ESLint configuration
    configs.push(this.generateMainConfig(options));

    // Generate TypeScript specific configuration if needed
    if (options.enableTypeScript) {
      configs.push(this.generateTypeScriptConfig(options));
    }

    // Generate testing configuration if needed
    if (options.enableTesting) {
      configs.push(this.generateTestingConfig(options));
    }

    // Generate ignore file
    configs.push(this.generateIgnoreFile());

    return configs;
  }

  /**
   * Generate main ESLint configuration
   * @param options - ESLint configuration options
   * @returns Generated ESLint configuration object
   */
  private generateMainConfig(options: ESLintConfigOptions): GeneratedESLintConfig {
    const filename = 'eslint.config.mjs';
    const content = this.buildMainConfigContent(options);

    return {
      filename,
      content,
      description: 'Main ESLint configuration with quality-based rules',
    };
  }

  /**
   * Generate TypeScript specific ESLint configuration
   * @param options - ESLint configuration options
   * @returns Generated TypeScript ESLint configuration object
   */
  private generateTypeScriptConfig(options: ESLintConfigOptions): GeneratedESLintConfig {
    const filename = 'eslint.typescript.mjs';
    const content = this.buildTypeScriptConfigContent(options);

    return {
      filename,
      content,
      description: 'TypeScript-specific ESLint rules and configuration',
    };
  }

  /**
   * Generate testing ESLint configuration
   * @param options - ESLint configuration options
   * @returns Generated testing ESLint configuration object
   */
  private generateTestingConfig(options: ESLintConfigOptions): GeneratedESLintConfig {
    const filename = 'eslint.testing.mjs';
    const content = this.buildTestingConfigContent(options);

    return {
      filename,
      content,
      description: 'ESLint configuration for test files',
    };
  }

  /**
   * Generate ESLint ignore file
   * @returns Generated ESLint ignore file configuration
   */
  private generateIgnoreFile(): GeneratedESLintConfig {
    const filename = '.eslintignore';
    const content = `# Dependencies
node_modules/

# Build outputs
dist/
build/
*.tsbuildinfo

# Coverage reports
coverage/
*.lcov

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Temporary files
*.tmp
.tmp/

# Runtime
.cache/
.temp/

# Documentation
docs/build/
site/public/

# Configuration files (handled by main config)
*.config.js
*.config.mjs
*.config.ts
`;

    return {
      filename,
      content,
      description: 'ESLint ignore file patterns',
    };
  }

  /**
   * Build main ESLint configuration content
   * @param options - ESLint configuration options
   * @returns ESLint configuration content string
   */
  private buildMainConfigContent(options: ESLintConfigOptions): string {
    const rules = this.getQualityRules(options.qualityLevel);
    const globals = this.getGlobalVariables(options.targetEnvironment);

    return `// ESLint Configuration for ${this.getProjectTypeName(options.projectType)}
// Quality Level: ${options.qualityLevel}
// Target Environment: ${options.targetEnvironment}
${this.generateConfigHeader(options)}

import eslint from '@eslint/js';

export default [
  eslint.configs.recommended,
  {
    files: ['**/*.js', '**/*.mjs'],
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
      globals: ${JSON.stringify(globals, null, JSON_SERIALIZATION.DEEP_INDENT)}
    },
    rules: ${JSON.stringify(rules, null, JSON_SERIALIZATION.DEEP_INDENT)}
  },
  {
    ignores: [
      'dist/**',
      'build/**',
      'coverage/**',
      'node_modules/**',
      '*.config.js',
      '*.config.mjs'
    ]
  }
];
`;
  }

  /**
   * Build TypeScript ESLint configuration content
   * @param options - ESLint configuration options
   * @returns TypeScript ESLint configuration content string
   */
  private buildTypeScriptConfigContent(options: ESLintConfigOptions): string {
    const tsRules = this.getTypeScriptRules(options.qualityLevel);
    const parserOptions = this.getParserOptions(options.projectType);

    return `// TypeScript ESLint Configuration for ${this.getProjectTypeName(options.projectType)}
// Quality Level: ${options.qualityLevel}

import typescriptPlugin from '@typescript-eslint/eslint-plugin';
import typescriptParser from '@typescript-eslint/parser';

export default [
  {
    files: ['**/*.ts'],
    languageOptions: {
      parser: typescriptParser,
      parserOptions: ${JSON.stringify(parserOptions, null, JSON_SERIALIZATION.DEEP_INDENT)}
    },
    plugins: {
      '@typescript-eslint': typescriptPlugin
    },
    rules: ${JSON.stringify(tsRules, null, JSON_SERIALIZATION.DEEP_INDENT)}
  },
  ${options.projectType === 'library' ? this.generateLibrarySpecificConfig() : ''}
  ${options.projectType === 'web' ? this.generateWebSpecificConfig() : ''}
  ${options.projectType === 'cli' ? this.generateCliSpecificConfig() : ''}
];
`;
  }

  /**
   * Build testing ESLint configuration content
   * @param options - ESLint configuration options
   * @returns Testing ESLint configuration content string
   */
  private buildTestingConfigContent(options: ESLintConfigOptions): string {
    const testRules = this.getTestingRules(options.qualityLevel);

    return `// Testing ESLint Configuration
// Applied to test files

export default [
  {
    files: ['**/*.test.ts', '**/*.spec.ts', '**/test/**/*.ts', '**/tests/**/*.ts'],
    rules: ${JSON.stringify(testRules, null, JSON_SERIALIZATION.DEEP_INDENT)},
    languageOptions: {
      globals: {
        ${this.getTestingGlobals().join(',\n        ')}
      }
    }
  }
];
`;
  }

  /**
   * Get quality-based rules
   * @param qualityLevel - Quality level for rules
   * @returns Record of ESLint rules
   */
  private getQualityRules(qualityLevel: string): Record<string, unknown> {
    const baseRules = {
      'no-var': 'error',
      'prefer-const': 'error',
      'prefer-arrow-callback': 'error',
      'arrow-spacing': 'error',
      'no-duplicate-imports': 'error',
      'no-useless-constructor': 'error',
      'no-unused-expressions': 'error',
      'prefer-template': 'error',
      'template-curly-spacing': 'error',
      'object-curly-spacing': ['error', 'always'],
      'array-bracket-spacing': ['error', 'never'],
      'computed-property-spacing': ['error', 'never'],
      'no-multiple-empty-lines': ['error', { max: FORMATTING.MAX_EMPTY_LINES }],
      'eol-last': 'error',
      'comma-dangle': ['error', 'never'],
      semi: ['error', 'always'],
      quotes: ['error', 'single', { avoidEscape: true }],
      indent: ['error', FORMATTING.JSON_INDENT_SIZE, { SwitchCase: FORMATTING.SWITCH_CASE_OFFSET }],
      'max-len': ['warn', { code: 100, ignoreUrls: true }],
      'no-trailing-spaces': 'error',
    };

    switch (qualityLevel) {
      case 'light':
        return {
          ...baseRules,
          'no-console': 'off',
          'no-debugger': 'off',
          'no-unused-vars': 'warn',
          'no-undef': 'warn',
        };

      case 'medium':
        return {
          ...baseRules,
          'no-console': 'warn',
          'no-debugger': 'error',
          'no-unused-vars': 'error',
          'no-undef': 'error',
          eqeqeq: 'error',
          curly: 'error',
          'brace-style': ['error', '1tbs'],
          'key-spacing': 'error',
          'keyword-spacing': 'error',
          'space-before-blocks': 'error',
          'space-infix-ops': 'error',
          'space-unary-ops': 'error',
          'spaced-comment': 'error',
          'no-mixed-spaces-and-tabs': 'error',
          'no-spaced-func': 'error',
        };

      case 'strict':
        return {
          ...baseRules,
          'no-console': 'error',
          'no-debugger': 'error',
          'no-unused-vars': 'error',
          'no-undef': 'error',
          eqeqeq: ['error', 'always'],
          curly: ['error', 'all'],
          'brace-style': ['error', '1tbs', { allowSingleLine: false }],
          'key-spacing': ['error', { beforeColon: false, afterColon: true }],
          'keyword-spacing': ['error', { before: true, after: true }],
          'space-before-blocks': 'error',
          'space-infix-ops': 'error',
          'space-unary-ops': ['error', { words: true, nonwords: false }],
          'spaced-comment': ['error', 'always'],
          'no-mixed-spaces-and-tabs': 'error',
          'no-spaced-func': 'error',
          'no-else-return': 'error',
          'no-empty-function': 'error',
          'no-magic-numbers': 'warn',
          'no-param-reassign': 'error',
          'no-return-assign': 'error',
          'no-return-await': 'error',
          'no-throw-literal': 'error',
          'no-unmodified-loop-condition': 'error',
          'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true }],
          'no-useless-call': 'error',
          'no-useless-concat': 'error',
          'no-useless-return': 'error',
          'prefer-promise-reject-errors': 'error',
          'require-await': 'error',
          yoda: 'error',
        };

      default:
        return baseRules;
    }
  }

  /**
   * Get TypeScript-specific rules
   * @param qualityLevel - ESLint configuration options
   
   * @param qualityLevel
   */
  private getTypeScriptRules(qualityLevel: string): Record<string, any> {
    const baseTSRules = {
      '@typescript-eslint/prefer-const': 'error',
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/no-duplicate-imports': 'error',
      '@typescript-eslint/no-unused-expressions': 'error',
      '@typescript-eslint/prefer-template': 'error',
      '@typescript-eslint/template-curly-spacing': 'error',
      '@typescript-eslint/object-curly-spacing': ['error', 'always'],
      '@typescript-eslint/comma-dangle': ['error', 'never'],
      '@typescript-eslint/semi': ['error', 'always'],
      '@typescript-eslint/quotes': ['error', 'single', { avoidEscape: true }],
      '@typescript-eslint/indent': [
        'error',
        FORMATTING.JSON_INDENT_SIZE,
        { SwitchCase: FORMATTING.SWITCH_CASE_OFFSET },
      ],
      '@typescript-eslint/no-trailing-spaces': 'error',
    };

    switch (qualityLevel) {
      case 'light':
        return {
          ...baseTSRules,
          '@typescript-eslint/no-explicit-any': 'off',
          '@typescript-eslint/no-unused-vars': 'warn',
        };

      case 'medium':
        return {
          ...baseTSRules,
          '@typescript-eslint/no-explicit-any': 'warn',
          '@typescript-eslint/no-unused-vars': 'error',
          '@typescript-eslint/prefer-nullish-coalescing': 'error',
          '@typescript-eslint/prefer-optional-chain': 'error',
          '@typescript-eslint/no-unnecessary-type-assertion': 'error',
          '@typescript-eslint/prefer-as-const': 'error',
          '@typescript-eslint/no-inferrable-types': 'error',
        };

      case 'strict':
        return {
          ...baseTSRules,
          '@typescript-eslint/no-explicit-any': 'error',
          '@typescript-eslint/no-unused-vars': 'error',
          '@typescript-eslint/prefer-nullish-coalescing': 'error',
          '@typescript-eslint/prefer-optional-chain': 'error',
          '@typescript-eslint/no-unnecessary-type-assertion': 'error',
          '@typescript-eslint/prefer-as-const': 'error',
          '@typescript-eslint/no-inferrable-types': 'error',
          '@typescript-eslint/no-non-null-assertion': 'error',
          '@typescript-eslint/prefer-readonly': 'error',
          '@typescript-eslint/prefer-readonly-parameter-types': 'error',
          '@typescript-eslint/strict-boolean-expressions': 'error',
          '@typescript-eslint/no-unnecessary-condition': 'error',
          '@typescript-eslint/no-floating-promises': 'error',
          '@typescript-eslint/await-thenable': 'error',
          '@typescript-eslint/no-misused-promises': 'error',
          '@typescript-eslint/require-await': 'error',
          '@typescript-eslint/no-for-in-array': 'error',
          '@typescript-eslint/no-unsafe-assignment': 'error',
          '@typescript-eslint/no-unsafe-call': 'error',
          '@typescript-eslint/no-unsafe-member-access': 'error',
          '@typescript-eslint/no-unsafe-return': 'error',
        };

      default:
        return baseTSRules;
    }
  }

  /**
   * Get testing-specific rules
   * @param qualityLevel - ESLint configuration options
   
   * @param qualityLevel
   */
  private getTestingRules(qualityLevel: string): Record<string, any> {
    return {
      'no-unused-expressions': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off',
      'no-console': 'off',
      'no-magic-numbers': 'off',
      'max-len': 'off',
    };
  }

  /**
   * Get parser options based on project type
   * @param projectType - ESLint configuration options
   
   * @param projectType
   */
  private getParserOptions(projectType: string): Record<string, any> {
    const baseOptions = {
      ecmaVersion: 'latest',
      sourceType: 'module',
    };

    switch (projectType) {
      case 'library':
        return {
          ...baseOptions,
          project: './tsconfig.json',
          tsconfigRootDir: '.',
        };

      case 'web':
        return {
          ...baseOptions,
          project: './tsconfig.json',
          tsconfigRootDir: '.',
        };

      case 'cli':
        return {
          ...baseOptions,
          project: './tsconfig.json',
          tsconfigRootDir: '.',
        };

      default:
        return baseOptions;
    }
  }

  /**
   * Get global variables based on target environment
   * @param targetEnvironment - ESLint configuration options
   
   * @param targetEnvironment
   */
  private getGlobalVariables(targetEnvironment: string): Record<string, string> {
    const nodeGlobals = {
      process: 'readonly',
      Buffer: 'readonly',
      __dirname: 'readonly',
      __filename: 'readonly',
      global: 'readonly',
      console: 'readonly',
    };

    const browserGlobals = {
      window: 'readonly',
      document: 'readonly',
      navigator: 'readonly',
      location: 'readonly',
      history: 'readonly',
      localStorage: 'readonly',
      sessionStorage: 'readonly',
    };

    switch (targetEnvironment) {
      case 'node':
        return nodeGlobals;

      case 'browser':
        return browserGlobals;

      case 'both':
        return { ...nodeGlobals, ...browserGlobals };

      default:
        return {};
    }
  }

  /**
   * Get testing globals
   */
  private getTestingGlobals(): string[] {
    return [
      'describe: readonly',
      'it: readonly',
      'test: readonly',
      'expect: readonly',
      'beforeAll: readonly',
      'afterAll: readonly',
      'beforeEach: readonly',
      'afterEach: readonly',
      'vi: readonly',
      'jest: readonly',
    ];
  }

  /**
   * Get target environment based on project type
   * @param projectType - ESLint configuration options
   
   * @param projectType
   */
  private getTargetEnvironment(projectType: string): 'node' | 'browser' | 'both' {
    switch (projectType) {
      case 'web':
        return 'browser';
      case 'cli':
        return 'node';
      case 'library':
        return 'both';
      default:
        return 'node';
    }
  }

  /**
   * Get project type name for display
   * @param projectType - ESLint configuration options
   
   * @param projectType
   */
  private getProjectTypeName(projectType: string): string {
    const names = {
      basic: 'Basic TypeScript Project',
      web: 'Web Application',
      cli: 'CLI Application',
      library: 'Library Package',
    };
    return names[projectType as keyof typeof names] || 'Unknown';
  }

  /**
   * Generate configuration header
   * @param options - ESLint configuration options
   
   * @param options
   */
  private generateConfigHeader(options: ESLintConfigOptions): string {
    const timestamp = new Date().toISOString().split('T')[0];
    return `
/*
 * Generated by Nìmata CLI
 * Generated on: ${timestamp}
 * Project Type: ${this.getProjectTypeName(options.projectType)}
 * Quality Level: ${options.qualityLevel}
 *
 * This file was automatically generated.
 * Modify with care, as changes may be overwritten.
 */
`;
  }

  /**
   * Generate library-specific configuration
   */
  private generateLibrarySpecificConfig(): string {
    return `  {
    // Library-specific rules for distribution
    files: ['**/src/**/*.ts'],
    rules: {
      '@typescript-eslint/explicit-module-boundary-types': 'error',
      '@typescript-eslint/no-empty-interface': 'warn',
      '@typescript-eslint/no-empty-function': 'warn'
    }
  },
`;
  }

  /**
   * Generate web-specific configuration
   */
  private generateWebSpecificConfig(): string {
    return `  {
    // Web application specific rules
    files: ['**/src/**/*.ts'],
    rules: {
      '@typescript-eslint/no-unsafe-member-access': 'off',
      '@typescript-eslint/no-unsafe-assignment': 'off'
    }
  },
`;
  }

  /**
   * Generate CLI-specific configuration
   */
  private generateCliSpecificConfig(): string {
    return `  {
    // CLI application specific rules
    files: ['**/src/**/*.ts'],
    rules: {
      'no-console': 'off',
      'no-process-exit': 'off'
    }
  },
`;
  }
}

/**
 * Create an ESLint generator instance
 */
export function createESLintGenerator(): ESLintGenerator {
  return new ESLintGenerator();
}
