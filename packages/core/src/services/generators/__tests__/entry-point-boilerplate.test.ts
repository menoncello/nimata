/**
 * Entry Point Boilerplate Validation Tests
 *
 * P1 Coverage Gap: Entry point boilerplate validation tests for Story 1.4
 * Tests validate the actual entry point content generated by DirectoryStructureGenerator
 */

import { describe, it, expect, beforeEach } from 'bun:test';
import type { ProjectConfig } from '../../../types/project-config.js';
import { DirectoryStructureGenerator } from '../directory-structure-generator.js';

describe('Entry Point Boilerplate Validation - Story 1.4 P1', () => {
  let generator: DirectoryStructureGenerator;
  let basicConfig: ProjectConfig;

  beforeEach(() => {
    generator = new DirectoryStructureGenerator();
    basicConfig = {
      name: 'test-project',
      description: 'Test project for entry point validation',
      qualityLevel: 'medium',
      projectType: 'basic',
      aiAssistants: ['claude-code'],
      author: 'Test Author',
      license: 'MIT',
    };
  });

  describe('P1-1: Main Entry Point Boilerplate Validation', () => {
    it('1.4-AC2-001: P1 - should generate src/index.ts with proper JSDoc header', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile).toBeDefined();
      expect(indexFile?.content).toContain('/**');
      expect(indexFile?.content).toContain('* @author');
      expect(indexFile?.content).toContain('* @license');
      expect(indexFile?.content).toContain('* @version');
      expect(indexFile?.content).toContain('*/');
    });

    it('1.4-AC2-002: P1 - should include proper exports in main entry point', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile?.content).toContain('export');
      expect(indexFile?.content).toContain(basicConfig.name);
      expect(indexFile?.content).toContain(basicConfig.description);
    });

    it('1.4-AC2-003: P1 - should include project metadata in entry point', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile?.content).toContain(basicConfig.author);
      expect(indexFile?.content).toContain(basicConfig.license);
      expect(indexFile?.content).toContain('1.0.0'); // Version is hardcoded in generator
    });

    it('1.4-AC2-004: P1 - should adapt entry point content for different project types', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile?.content).toContain('CLI');
      expect(indexFile?.content).toContain('command');
    });
  });

  describe('P1-2: CLI Entry Point Boilerplate Validation', () => {
    it('1.4-AC2-005: P1 - should generate CLI launcher with proper shebang', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const cliLauncher = structure.find(
        (item) => item.type === 'file' && item.path === `bin/${cliConfig.name}`
      );

      expect(cliLauncher).toBeDefined();
      expect(cliLauncher?.content).toContain('#!/usr/bin/env bun');
      expect(cliLauncher?.executable).toBe(true);
      expect(cliLauncher?.mode).toBe(0o755);
    });

    it('1.4-AC2-006: P1 - should include comprehensive error handling in CLI launcher', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const cliLauncher = structure.find(
        (item) => item.type === 'file' && item.path === `bin/${cliConfig.name}`
      );

      expect(cliLauncher?.content).toContain('uncaughtException');
      expect(cliLauncher?.content).toContain('unhandledRejection');
      expect(cliLauncher?.content).toContain('try');
      expect(cliLauncher?.content).toContain('catch');
      expect(cliLauncher?.content).toContain('process.exit(1)');
    });

    it('1.4-AC2-007: P1 - should include project metadata in CLI launcher header', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
        author: 'Custom Author',
        license: 'Apache-2.0',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const cliLauncher = structure.find(
        (item) => item.type === 'file' && item.path === `bin/${cliConfig.name}`
      );

      expect(cliLauncher?.content).toContain('CLI Entry Point');
      expect(cliLauncher?.content).toContain('Custom Author');
      expect(cliLauncher?.content).toContain('Apache-2.0');
      expect(cliLauncher?.content).toContain('1.0.0');
    });

    it('1.4-AC2-008: P1 - should import CLI main function correctly', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const cliLauncher = structure.find(
        (item) => item.type === 'file' && item.path === `bin/${cliConfig.name}`
      );

      expect(cliLauncher?.content).toContain('import { main }');
      expect(cliLauncher?.content).toContain('../src/cli/index.js');
      expect(cliLauncher?.content).toContain('main(args)');
    });

    it('1.4-AC2-009: P1 - should handle development mode in CLI error reporting', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const cliLauncher = structure.find(
        (item) => item.type === 'file' && item.path === `bin/${cliConfig.name}`
      );

      expect(cliLauncher?.content).toContain("NODE_ENV === 'development'");
      expect(cliLauncher?.content).toContain('error.stack');
      expect(cliLauncher?.content).toContain('VERBOSE');
    });
  });

  describe('P1-3: Entry Point Content Quality Validation', () => {
    it('1.4-AC2-010: P1 - should generate entry points without syntax errors', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile?.content).toBeDefined();

      // Basic syntax validation - should contain balanced braces
      const openBraces = (indexFile?.content?.match(/{/g) || []).length;
      const closeBraces = (indexFile?.content?.match(/}/g) || []).length;
      expect(openBraces).toBe(closeBraces);
    });

    it('1.4-AC2-011: P1 - should include TypeScript type annotations in entry points', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      // Should include proper TypeScript syntax
      expect(indexFile?.content).toContain(':');
    });

    it('1.4-AC2-012: P1 - should use consistent code style in entry points', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      // Should use consistent indentation (2 spaces consistently)
      const lines = indexFile?.content?.split('\n') || [];
      const indentedLines = lines.filter(
        (line) => line.startsWith('  ') || line.startsWith('    ')
      );

      if (indentedLines.length > 0) {
        // Check that 2-space indentation is used consistently
        const hasTwoSpaceIndent = indentedLines.some((line) => line.startsWith('  '));
        // Should primarily use 2-space indentation (which is the case)
        expect(hasTwoSpaceIndent).toBe(true);
      }
    });

    it('1.4-AC2-013: P1 - should include proper module structure in entry points', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      // Should follow proper module structure
      expect(indexFile?.content).toMatch(/export\s+/);
    });
  });

  describe('P1-4: Entry Point Security Validation', () => {
    it('1.4-AC2-014: P1 - should not include sensitive information in entry points', () => {
      // Given (using type assertion to simulate sensitive data that shouldn't be in entry points)
      const configWithSensitiveData = {
        ...basicConfig,
        // Simulate sensitive data that should not be in entry points
        apiKey: 'test-api-key-12345',
        secret: 'test-secret-value-67890',
      } as ProjectConfig;

      // When
      const structure = generator.generate(configWithSensitiveData);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile?.content).not.toContain('test-secret-key');
      expect(indexFile?.content).not.toContain('test-secret-password');
    });

    it('1.4-AC2-015: P1 - should validate CLI launcher security practices', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const cliLauncher = structure.find(
        (item) => item.type === 'file' && item.path === `bin/${cliConfig.name}`
      );

      // Should include proper error handling to prevent information leakage
      expect(cliLauncher?.content).toContain("process.env.NODE_ENV === 'development'");

      // Should not expose stack traces in production
      expect(cliLauncher?.content).toMatch(
        /if\s*\(process\.env\.NODE_ENV\s*===\s*["']development["'].*console\.error\(error\.stack\)/s
      );
    });
  });

  describe('P1-5: Entry Point Performance Validation', () => {
    it('1.4-AC2-016: P1 - should generate entry points efficiently', () => {
      // Given
      const startTime = performance.now();

      // When
      generator.generate(basicConfig);
      const endTime = performance.now();

      // Then
      const duration = endTime - startTime;
      expect(duration).toBeLessThan(100); // Should generate in under 100ms
    });

    it('1.4-AC2-017: P1 - should handle large project names in entry points', () => {
      // Given
      const largeNameConfig: ProjectConfig = {
        ...basicConfig,
        name: 'very-long-project-name-with-many-words-and-numbers-12345',
      };

      // When
      const structure = generator.generate(largeNameConfig);

      // Then
      const indexFile = structure.find(
        (item) => item.type === 'file' && item.path === 'src/index.ts'
      );

      expect(indexFile?.content).toContain(largeNameConfig.name);
    });
  });
});
