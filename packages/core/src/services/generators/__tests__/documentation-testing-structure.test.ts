/**
 * Documentation and Testing Structure Generation Tests
 *
 * P2 Coverage: Documentation and testing structure generation tests for Story 1.4
 * Tests validate the documentation files and testing structure generated by DirectoryStructureGenerator
 */

import { describe, it, expect, beforeEach } from 'bun:test';
import type { ProjectConfig } from '../../../types/project-config.js';
import { DirectoryStructureGenerator } from '../directory-structure-generator.js';

describe('Documentation and Testing Structure Generation - Story 1.4 P2', () => {
  let generator: DirectoryStructureGenerator;
  let basicConfig: ProjectConfig;

  beforeEach(() => {
    generator = new DirectoryStructureGenerator();
    basicConfig = {
      name: 'test-project',
      description: 'Test project for documentation and testing structure validation',
      qualityLevel: 'medium',
      projectType: 'basic',
      aiAssistants: ['claude-code'],
      author: 'Test Author',
      license: 'MIT',
    };
  });

  describe('P2-1: Documentation Structure Generation', () => {
    it('1.4-AC4-001: P2 - should generate comprehensive README.md with project information', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      expect(readme).toBeDefined();
      expect(readme?.content).toContain(basicConfig.name);
      expect(readme?.content).toContain(basicConfig.description);
      expect(readme?.content).toContain('# ');
      expect(readme?.content).toContain('## Installation');
      expect(readme?.content).toContain('## Usage');
      expect(readme?.content).toContain('## Development');
    });

    it('1.4-AC4-002: P2 - should include project metadata in README.md', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      expect(readme?.content).toContain(basicConfig.author);
      expect(readme?.content).toContain(basicConfig.license);
      expect(readme?.content).toContain('License'); // License section header
    });

    it('1.4-AC4-003: P2 - should generate API documentation placeholder', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const apiDocs = structure.find((item) => item.type === 'file' && item.path === 'docs/api.md');

      expect(apiDocs).toBeDefined();
      expect(apiDocs?.content).toContain('API Documentation');
      expect(apiDocs?.content).toContain('## Overview');
      expect(apiDocs?.content).toContain('## Installation');
      expect(apiDocs?.content).toContain('## API Reference');
      expect(apiDocs?.content).toContain('## Usage'); // Actual header in generated content
    });

    it('1.4-AC4-004: P2 - should create proper documentation directory structure', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const directories = structure.filter((item) => item.type === 'directory');
      const directoryPaths = directories.map((item) => item.path);

      // Should have documentation directories
      expect(directoryPaths).toContain('docs');
      expect(directoryPaths).toContain('docs/api');
      expect(directoryPaths).toContain('docs/examples');

      // Should have .gitkeep files in empty documentation directories
      const gitkeepFiles = structure.filter(
        (item) => item.type === 'file' && item.path.endsWith('.gitkeep')
      );
      const gitkeepPaths = gitkeepFiles.map((item) => item.path);

      expect(gitkeepPaths).toContain('docs/api/.gitkeep');
      expect(gitkeepPaths).toContain('docs/examples/.gitkeep');
    });

    it('1.4-AC4-005: P2 - should adapt documentation for different project types', () => {
      // Given
      const libraryConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'library',
      };

      // When
      const structure = generator.generate(libraryConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      // All generated READMEs have the same basic structure, check for essential elements
      expect(readme?.content).toContain('## Installation');
      expect(readme?.content).toContain('## Usage');
      expect(readme?.content).toContain('bun add');
    });
  });

  describe('P2-2: AI Assistant Configuration Documentation', () => {
    it('1.4-AC4-006: P2 - should generate Claude Code configuration', () => {
      // Given
      const claudeConfig: ProjectConfig = {
        ...basicConfig,
        aiAssistants: ['claude-code'],
      };

      // When
      const structure = generator.generate(claudeConfig);

      // Then
      const claudeFile = structure.find(
        (item) => item.type === 'file' && item.path === '.claude/CLAUDE.md'
      );

      expect(claudeFile).toBeDefined();
      expect(claudeFile?.content).toContain('Claude Code Configuration');
      expect(claudeFile?.content).toContain(basicConfig.name);
      expect(claudeFile?.content).toContain('Project Information');
      expect(claudeFile?.content).toContain('Development Guidelines');
    });

    it('1.4-AC4-007: P2 - should generate Cursor configuration', () => {
      // Given
      const cursorConfig: ProjectConfig = {
        ...basicConfig,
        aiAssistants: ['cursor'],
      };

      // When
      const structure = generator.generate(cursorConfig);

      // Then
      const cursorFile = structure.find(
        (item) => item.type === 'file' && item.path === '.cursorrules'
      );

      expect(cursorFile).toBeDefined();
      expect(cursorFile?.content).toContain('Cursor Rules');
      expect(cursorFile?.content).toContain(basicConfig.name);
    });

    it('1.4-AC4-008: P2 - should generate multiple AI assistant configurations', () => {
      // Given
      const multiAIConfig: ProjectConfig = {
        ...basicConfig,
        aiAssistants: ['claude-code', 'cursor', 'github-copilot'],
      };

      // When
      const structure = generator.generate(multiAIConfig);

      // Then
      const claudeFile = structure.find(
        (item) => item.type === 'file' && item.path === '.claude/CLAUDE.md'
      );
      const cursorFile = structure.find(
        (item) => item.type === 'file' && item.path === '.cursorrules'
      );
      const copilotFile = structure.find(
        (item) => item.type === 'file' && item.path === '.github/copilot-instructions.md'
      );

      expect(claudeFile).toBeDefined();
      expect(cursorFile).toBeDefined();
      expect(copilotFile).toBeDefined();
    });
  });

  describe('P2-3: Testing Structure Generation', () => {
    it('1.4-AC5-001: P2 - should create comprehensive test directory structure', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const directories = structure.filter((item) => item.type === 'directory');
      const directoryPaths = directories.map((item) => item.path);

      // Should have all test directories
      expect(directoryPaths).toContain('tests');
      expect(directoryPaths).toContain('tests/unit');
      expect(directoryPaths).toContain('tests/integration');
      expect(directoryPaths).toContain('tests/e2e');
      expect(directoryPaths).toContain('tests/fixtures');
      expect(directoryPaths).toContain('tests/factories');
    });

    it('1.4-AC5-002: P2 - should generate test setup file', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const testSetup = structure.find(
        (item) => item.type === 'file' && item.path === 'tests/setup.ts'
      );

      expect(testSetup).toBeDefined();
      expect(testSetup?.content).toContain('import { vi }');
      expect(testSetup?.content).toContain('beforeEach');
      expect(testSetup?.content).toContain('global');
      expect(testSetup?.content).toContain('clearAllMocks');
    });

    it('1.4-AC5-003: P2 - should generate basic index test file', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexTest = structure.find(
        (item) => item.type === 'file' && item.path === 'tests/index.test.ts'
      );

      expect(indexTest).toBeDefined();
      expect(indexTest?.content).toContain('describe');
      expect(indexTest?.content).toContain('it');
      expect(indexTest?.content).toContain('expect');
      expect(indexTest?.content).toContain(basicConfig.name);
    });

    it('1.4-AC5-004: P2 - should include .gitkeep files in empty test directories', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const gitkeepFiles = structure.filter(
        (item) => item.type === 'file' && item.path.endsWith('.gitkeep')
      );
      const gitkeepPaths = gitkeepFiles.map((item) => item.path);

      // Should have .gitkeep files in all empty test directories
      expect(gitkeepPaths).toContain('tests/unit/.gitkeep');
      expect(gitkeepPaths).toContain('tests/integration/.gitkeep');
      expect(gitkeepPaths).toContain('tests/e2e/.gitkeep');
      expect(gitkeepPaths).toContain('tests/fixtures/.gitkeep');
      expect(gitkeepPaths).toContain('tests/factories/.gitkeep');
    });

    it('1.4-AC5-005: P2 - should generate test configuration files', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const vitestConfig = structure.find(
        (item) => item.type === 'file' && item.path === 'vitest.config.ts'
      );

      expect(vitestConfig).toBeDefined();
      expect(vitestConfig?.content).toContain('defineConfig');
      expect(vitestConfig?.content).toContain('test');
      expect(vitestConfig?.content).toContain('coverage');
    });
  });

  describe('P2-4: Quality-Based Documentation and Testing Structure', () => {
    it('1.4-AC5-006: P2 - should include coverage configuration for strict quality', () => {
      // Given
      const strictConfig: ProjectConfig = {
        ...basicConfig,
        qualityLevel: 'strict',
      };

      // When
      const structure = generator.generate(strictConfig);

      // Then
      const vitestConfig = structure.find(
        (item) => item.type === 'file' && item.path === 'vitest.config.ts'
      );

      expect(vitestConfig?.content).toContain('coverage');
      expect(vitestConfig?.content).toContain('provider');
      expect(vitestConfig?.content).toContain('reporter');
      expect(vitestConfig?.content).toContain('include');
    });

    it('1.4-AC5-007: P2 - should include mutation testing configuration for high quality', () => {
      // Given
      const highQualityConfig: ProjectConfig = {
        ...basicConfig,
        qualityLevel: 'high',
      };

      // When
      const structure = generator.generate(highQualityConfig);

      // Then
      const strykerConfig = structure.find(
        (item) => item.type === 'file' && item.path === 'stryker.config.json'
      );

      expect(strykerConfig).toBeDefined();
      expect(strykerConfig?.content).toContain('mutator');
      expect(strykerConfig?.content).toContain('testRunner');
      expect(strykerConfig?.content).toContain('coverageAnalysis');
    });

    it('1.4-AC5-008: P2 - should include CI configuration for high quality projects', () => {
      // Given
      const highQualityConfig: ProjectConfig = {
        ...basicConfig,
        qualityLevel: 'high',
      };

      // When
      const structure = generator.generate(highQualityConfig);

      // Then
      const ciConfig = structure.find(
        (item) => item.type === 'file' && item.path === '.github/workflows/ci.yml'
      );

      expect(ciConfig).toBeDefined();
      expect(ciConfig?.content).toContain('name: CI');
      expect(ciConfig?.content).toContain('test');
      expect(ciConfig?.content).toContain('coverage');
      expect(ciConfig?.content).toContain('build');
    });
  });

  describe('P2-5: Documentation Content Quality', () => {
    it('1.4-AC4-009: P2 - should include proper markdown formatting in README', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      // Should have proper markdown structure
      expect(readme?.content).toMatch(/^#\s+/m); // H1 header
      expect(readme?.content).toMatch(/^##\s+/m); // H2 headers
      expect(readme?.content).toMatch(/```[\S\s]*```/m); // Code blocks
      expect(readme?.content).toMatch(/\[[^[\]]+]\([^()]*\)/); // Links - ReDoS-safe pattern
    });

    it('1.4-AC4-010: P2 - should include installation instructions', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      expect(readme?.content).toContain('bun add');
      expect(readme?.content).toContain('```bash');
      expect(readme?.content).toContain('Installation');
    });

    it('1.4-AC4-011: P2 - should include usage examples', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      expect(readme?.content).toContain('## Usage');
      expect(readme?.content).toContain('import');
      expect(readme?.content).toContain('TestProjectCore');
    });

    it('1.4-AC4-012: P2 - should include development setup instructions', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      expect(readme?.content).toContain('## Development');
      expect(readme?.content).toContain('bun test');
      expect(readme?.content).toContain('typecheck');
      expect(readme?.content).toContain('build');
    });
  });

  describe('P2-6: Testing Content Quality', () => {
    it('1.4-AC5-009: P2 - should include proper test setup with mocking', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const testSetup = structure.find(
        (item) => item.type === 'file' && item.path === 'tests/setup.ts'
      );

      expect(testSetup?.content).toContain('vi.fn');
      expect(testSetup?.content).toContain('vi.clearAllMocks');
      expect(testSetup?.content).toContain('global');
    });

    it('1.4-AC5-010: P2 - should include meaningful test examples', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const indexTest = structure.find(
        (item) => item.type === 'file' && item.path === 'tests/index.test.ts'
      );

      expect(indexTest?.content).toContain('should');
      expect(indexTest?.content).toContain('expect');
      expect(indexTest?.content).toContain('toBe');
      expect(indexTest?.content).toContain('toBeDefined');
    });

    it('1.4-AC5-011: P2 - should include test data directory structure', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const directories = structure.filter((item) => item.type === 'directory');
      const directoryPaths = directories.map((item) => item.path);

      expect(directoryPaths).toContain('tests/fixtures');
      expect(directoryPaths).toContain('tests/factories');

      // Should have .gitkeep files for test data directories
      const gitkeepFiles = structure.filter(
        (item) => item.type === 'file' && item.path.includes('.gitkeep')
      );
      const hasTestDataGitkeep = gitkeepFiles.some((item) => item.path.startsWith('tests/'));
      expect(hasTestDataGitkeep).toBe(true);
    });
  });

  describe('P2-7: Project-Type Specific Documentation and Testing', () => {
    it('1.4-AC4-013: P2 - should generate CLI-specific documentation', () => {
      // Given
      const cliConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'cli',
      };

      // When
      const structure = generator.generate(cliConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      // CLI projects should still have the basic README structure
      expect(readme?.content).toContain('## Installation');
      expect(readme?.content).toContain('## Usage');
      expect(readme?.content).toContain('## Development');

      // CLI projects should have the CLI executable
      const cliExecutable = structure.find(
        (item) => item.type === 'file' && item.path.startsWith('bin/')
      );
      expect(cliExecutable).toBeDefined();
      expect(cliExecutable?.mode).toBe(493); // 0o755 in decimal = 493
    });

    it('1.4-AC4-014: P2 - should generate web-specific documentation', () => {
      // Given
      const webConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'web',
      };

      // When
      const structure = generator.generate(webConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      // Web projects should have the basic README structure plus web-specific directories
      expect(readme?.content).toContain('## Installation');
      expect(readme?.content).toContain('## Usage');
      expect(readme?.content).toContain('## Development');

      // Web projects should have web-specific directories
      const directories = structure.filter((item) => item.type === 'directory');
      const directoryPaths = directories.map((item) => item.path);
      expect(directoryPaths).toContain('public');
      expect(directoryPaths).toContain('src/components');
      expect(directoryPaths).toContain('src/styles');
    });

    it('1.4-AC4-015: P2 - should generate library-specific documentation', () => {
      // Given
      const libraryConfig: ProjectConfig = {
        ...basicConfig,
        projectType: 'library',
      };

      // When
      const structure = generator.generate(libraryConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      // Library projects should have the basic README structure plus library-specific features
      expect(readme?.content).toContain('## Installation');
      expect(readme?.content).toContain('## Usage');
      expect(readme?.content).toContain('## Development');

      // Library projects should have dist directory for build output
      const directories = structure.filter((item) => item.type === 'directory');
      const directoryPaths = directories.map((item) => item.path);
      expect(directoryPaths).toContain('dist');
    });
  });

  describe('P2-8: Error Handling and Edge Cases', () => {
    it('1.4-P2-001: should handle missing project metadata gracefully', () => {
      // Given
      const minimalConfig: ProjectConfig = {
        name: 'minimal-project',
        qualityLevel: 'light',
        projectType: 'basic',
        aiAssistants: [],
      };

      // When
      const structure = generator.generate(minimalConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');

      expect(readme).toBeDefined();
      expect(readme?.content).toContain('minimal-project');
    });

    it('1.4-P2-002: should handle empty AI assistants list', () => {
      // Given
      const noAIConfig: ProjectConfig = {
        ...basicConfig,
        aiAssistants: [],
      };

      // When
      const structure = generator.generate(noAIConfig);

      // Then
      const aiFiles = structure.filter(
        (item) =>
          item.type === 'file' &&
          (item.path.includes('.claude') ||
            item.path.includes('.cursor') ||
            item.path.includes('copilot'))
      );

      expect(aiFiles).toHaveLength(0);
    });

    it('1.4-P2-003: should generate documentation with consistent formatting', () => {
      // When
      const structure = generator.generate(basicConfig);

      // Then
      const readme = structure.find((item) => item.type === 'file' && item.path === 'README.md');
      const apiDocs = structure.find((item) => item.type === 'file' && item.path === 'docs/api.md');

      // Both should have consistent markdown formatting
      expect(readme?.content).toMatch(/^# /m);
      expect(apiDocs?.content).toMatch(/^# /m);

      // Both should have proper spacing
      expect(readme?.content).toContain('\n\n');
      expect(apiDocs?.content).toContain('\n\n');
    });
  });
});
