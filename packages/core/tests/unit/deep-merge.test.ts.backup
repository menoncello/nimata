import { describe, it, expect } from 'bun:test';
import { deepMerge } from '../../src/utils/deep-merge';
import {
  createSimpleObject,
  createNestedObject,
  createArray,
  createProjectConfig,
  createGlobalConfig,
  createDefaultConfig
} from '../factories/config-factory';

// Helper to test throwing behavior without extra callback nesting
function expectToThrowTypeError(fn: () => void): void {
  let didThrow = false;
  try {
    fn();
  } catch (error) {
    didThrow = error instanceof TypeError;
  }
  expect(didThrow).toBe(true);
}

describe('Story 1.2 - AC3: Configuration System Deep Merge', () => {
  describe('P0 - Critical Merge Logic', () => {
    describe('1.2-CFG-001', () => {
      it('should merge two simple objects', () => {
        // Given two configuration objects
        const base = createSimpleObject({ a: 1, b: 2 });
        const override = createSimpleObject({ b: 3, c: 4 });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then the result should contain combined properties
        expect(result).toEqual({ a: 1, b: 3, c: 4 });
      });

      it('should return base when override is empty', () => {
        // Given a base config and empty override
        const base = createSimpleObject({ a: 1, b: 2 });
        const override = createSimpleObject({});

        // When deep merging them
        const result = deepMerge(base, override);

        // Then the result should equal the base
        expect(result).toEqual({ a: 1, b: 2 });
      });

      it('should override primitive values', () => {
        // Given a configuration with a primitive value
        const base = createSimpleObject({ value: 'old' });
        const override = createSimpleObject({ value: 'new' });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then the value should be overridden
        expect(result).toEqual({ value: 'new' });
      });
  });

  describe('P1 - Nested Object Merging', () => {
    describe('1.2-CFG-002', () => {
      it('should deeply merge nested objects', () => {
        // Given nested tool configurations
        const base = {
          tools: {
            eslint: { enabled: true, configPath: 'a.json' },
          },
        };
        const override = {
          tools: {
            eslint: { configPath: 'b.json' },
          },
        };

        // When deep merging them
        const result = deepMerge(base, override);

        // Then nested properties should be merged correctly
        expect(result).toEqual({
          tools: {
            eslint: {
              enabled: true,
              configPath: 'b.json',
            },
          },
        });
      });

      it('should merge 5-level nested structures', () => {
        // Given deeply nested configuration structures
        const base = createNestedObject(5);
        const override = createNestedObject(5, {
          level1: {
            level2: {
              level3: {
                level4: {
                  level5: { value: 'override' },
                },
              },
            },
          },
        });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then all levels should be merged with proper precedence
        expect(result).toEqual({
          level1: {
            level2: {
              level3: {
                level4: {
                  level5: {
                    value: 'override',
                    keep: true,
                  },
                },
              },
            },
          },
        });
      });

      it('should add new nested properties', () => {
        // Given a base configuration with some tools
        const base = {
          tools: {
            eslint: { enabled: true },
          },
        };
        const override = {
          tools: {
            typescript: { enabled: true },
          },
        };

        // When deep merging them
        const result = deepMerge(base, override);

        // Then new nested properties should be added
        expect(result).toEqual({
          tools: {
            eslint: { enabled: true },
            typescript: { enabled: true },
          },
        });
      });
    });
  });

  describe('P1 - Array Handling', () => {
    describe('1.2-CFG-003', () => {
      it('should replace arrays not merge', () => {
        // Given two configurations with array properties
        const base = { items: createArray(3, 'item') };
        const override = { items: createArray(2, 'override') };

        // When deep merging them
        const result = deepMerge(base, override);

        // Then arrays should be replaced not merged
        expect(result).toEqual({ items: ['override1', 'override2'] });
      });

      it('should replace empty array with new array', () => {
        // Given a configuration with empty array
        const base = { items: [] };
        const override = { items: createArray(2) };

        // When deep merging them
        const result = deepMerge(base, override);

        // Then empty array should be replaced
        expect(result).toEqual({ items: ['item1', 'item2'] });
      });

      it('should replace array with empty array', () => {
        // Given a configuration with array and empty override
        const base = { items: createArray(2) };
        const override = { items: [] };

        // When deep merging them
        const result = deepMerge(base, override);

        // Then array should be replaced with empty array
        expect(result).toEqual({ items: [] });
      });
    });
  });

  describe('P2 - Edge Cases', () => {
    describe('1.2-CFG-004', () => {
      it('should not override with undefined values', () => {
        // Given a base configuration and override with undefined
        const base = createSimpleObject({ a: 1, b: 2 });
        const override = createSimpleObject({ a: undefined, c: 3 });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then undefined should not override defined values
        expect(result).toEqual({ a: 1, b: 2, c: 3 });
      });

      it('should override with null values', () => {
        // Given a configuration with a value and null override
        const base = createSimpleObject({ value: 'something' });
        const override = createSimpleObject({ value: null });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then null should override the value
        expect(result).toEqual({ value: null });
      });

      it('should merge when base has undefined', () => {
        // Given a base with undefined and override with value
        const base = createSimpleObject({ a: undefined, b: 2 });
        const override = createSimpleObject({ a: 1 });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then undefined should be replaced
        expect(result).toEqual({ a: 1, b: 2 });
      });

      it('should merge when base has null', () => {
        // Given a base with null and override with value
        const base = createSimpleObject({ value: null });
        const override = createSimpleObject({ value: 'new' });

        // When deep merging them
        const result = deepMerge(base, override);

        // Then null should be replaced
        expect(result).toEqual({ value: 'new' });
      });
    });
  });

  describe('P2 - Error Handling', () => {
    describe('1.2-CFG-005', () => {
      it('should throw TypeError for null base', () => {
        // Given null base object
        // When deep merging with valid override
        // Then it should throw TypeError
        expectToThrowTypeError(() => deepMerge(null as any, {}));
      });

      it('should throw TypeError for array base', () => {
        // Given array base object
        // When deep merging with valid override
        // Then it should throw TypeError
        expectToThrowTypeError(() => deepMerge([] as any, {}));
      });

      it('should throw TypeError for string base', () => {
        // Given string base object
        // When deep merging with valid override
        // Then it should throw TypeError
        expectToThrowTypeError(() => deepMerge('string' as any, {}));
      });

      it('should throw TypeError for number base', () => {
        // Given number base object
        // When deep merging with valid override
        // Then it should throw TypeError
        expectToThrowTypeError(() => deepMerge(123 as any, {}));
      });
    });
  });

  describe('P2 - Edge Cases', () => {
    describe('1.2-CFG-006', () => {
      it('should return base for null override', () => {
        // Given valid base and null override
        const base = createSimpleObject({ a: 1 });

        // When deep merging
        const result = deepMerge(base, null as any);

        // Then base should be returned unchanged
        expect(result).toEqual(base);
      });

      it('should return base for array override', () => {
        // Given valid base and array override
        const base = createSimpleObject({ a: 1 });

        // When deep merging
        const result = deepMerge(base, [] as any);

        // Then base should be returned unchanged
        expect(result).toEqual(base);
      });

      it('should return base for string override', () => {
        // Given valid base and string override
        const base = createSimpleObject({ a: 1 });

        // When deep merging
        const result = deepMerge(base, 'string' as any);

        // Then base should be returned unchanged
        expect(result).toEqual(base);
      });

      it('should handle Date objects as values', () => {
        // Given configuration with date values
        const date = new Date('2024-01-01');
        const base = { created: new Date('2023-01-01') };
        const override = { created: date };

        // When deep merging
        const result = deepMerge(base, override);

        // Then date objects should be preserved
        expect(result.created).toBe(date);
      });

      it('should not mutate original objects', () => {
        // Given base and override objects
        const base = { tools: { eslint: { enabled: true } } };
        const override = { tools: { eslint: { configPath: 'test' } } };

        const baseCopy = JSON.parse(JSON.stringify(base));
        const overrideCopy = JSON.parse(JSON.stringify(override));

        // When deep merging
        deepMerge(base, override);

        // Then original objects should not be mutated
        expect(base).toEqual(baseCopy);
        expect(override).toEqual(overrideCopy);
      });

      it('should handle empty nested objects', () => {
        // Given base with empty nested object
        const base = { tools: {} };
        const override = { tools: { eslint: { enabled: true } } };

        // When deep merging
        const result = deepMerge(base, override);

        // Then empty nested object should be merged correctly
        expect(result).toEqual({
          tools: {
            eslint: { enabled: true },
          },
        });
      });
    });
  });

  describe('P0 - Realistic Config Scenarios', () => {
    describe('1.2-CFG-007', () => {
      it('should merge default plus global plus project configs', () => {
        // Given default, global, and project configurations
        const defaults = createDefaultConfig();
        const global = createGlobalConfig({
          tools: { eslint: { configPath: '.eslintrc.js' } }
        });
        const project = createProjectConfig({
          tools: { typescript: { strict: false } }
        });

        // When merging configurations in cascade order
        const step1 = deepMerge(defaults, global);
        const result = deepMerge(step1, project);

        // Then result should respect precedence: project > global > defaults
        expect(result).toEqual({
          qualityLevel: 'strict', // From project
          aiAssistants: ['copilot'], // From global
          tools: {
            eslint: {
              enabled: true, // From defaults
              configPath: '.eslintrc.js', // From global
            },
            typescript: {
              enabled: true, // From defaults
              strict: false, // From project (overrides default)
            },
          },
          logging: { level: 'debug' }, // From global
        });
      });
    });
  });

  describe('P0 - Performance', () => {
    describe('1.2-CFG-008', () => {
      it('should merge 100-key config in under 10ms', () => {
        // Given large configuration objects with 100 keys each
        const base: Record<string, unknown> = {};
        const override: Record<string, unknown> = {};

        for (let i = 0; i < 100; i++) {
          base[`key${i}`] = { nested: { value: i } };
          override[`key${i}`] = { nested: { value: i * 2 } };
        }

        // When deep merging large configurations
        const start = performance.now();
        const result = deepMerge(base, override);
        const duration = performance.now() - start;

        // Then operation should complete quickly
        expect(duration).toBeLessThan(10);
        expect(Object.keys(result)).toHaveLength(100);
      });
    });
  });
});
