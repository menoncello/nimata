<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1.1</epicId>
    <storyId>1.4</storyId>
    <title>Directory Structure Generator</title>
    <status>Approved</status>
    <generatedAt>2025-10-23</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.4.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>TypeScript developer setting up a new CLI project</asA>
    <iWant>NÃ¬mata to generate a complete, opinionated directory structure with all standard directories and essential files</iWant>
    <soThat>I can start coding immediately without manually creating project boilerplate</soThat>
    <tasks>P0 - Core Directory Structure (2 days)
P0-1: Directory Creation Engine
P0-2: Project Type Variations
P1 - Entry Point Generation (1.5 days)
P1-1: Main Entry Point Generator
P1-2: CLI Launcher Generation
P2 - Configuration and Documentation (1.5 days)
P2-1: Configuration File Generator
P2-2: Documentation Generator
P3 - Testing and Quality Structure (1 day)
P3-1: Test Structure Generator
P3-2: Quality Configuration
P4 - Integration and Validation (1 day)
P4-1: Template Integration
P4-2: Validation and Error Handling</tasks>
  </story>

  <acceptanceCriteria>AC1: Standard Directory Structure Creation
- Creates standard directories: src/, tests/, bin/, docs/, .nimata/
- Directory structure follows SOLID architecture principles
- All directories created with correct permissions (755)
- Structure supports both basic and CLI project types
- Empty .gitkeep files included in otherwise empty directories

AC2: Entry Point Files Generation
- Generates main entry point file: `src/index.ts`
- Creates CLI entry point if project type is CLI: `bin/cli-name`
- Bin launcher includes proper shebang line (`#!/usr/bin/env bun`)
- Executable permissions set on bin launcher (755)
- Entry points include basic boilerplate code with proper exports

AC3: Configuration Files Generation
- Generates .gitignore with comprehensive exclusions
- Includes node_modules, dist/, .nimata/cache/, and common development files
- Creates package.json with project metadata and dependencies
- Generates TypeScript configuration (tsconfig.json)
- Creates ESLint configuration based on quality level

AC4: Documentation Files Generation
- Creates README.md with project-specific information
- Includes project name, description, and basic usage examples
- Generates API documentation placeholder for library projects
- Creates CLAUDE.md with AI context for project
- Includes development setup and contribution guidelines

AC5: Quality and Testing Structure
- Creates test directory structure matching source code
- Generates basic test files with examples
- Sets up test configuration files
- Includes test data and fixtures directories
- Configures coverage reporting based on quality level

AC6: Project-Specific Structure
- Adapts structure based on project type (basic, web, cli, library)
- Includes project-specific directories (e.g., public/ for web apps)
- Generates appropriate configuration files for project type
- Includes type-specific entry points and exports
- Supports template-based customization</acceptanceCriteria>

  <artifacts>
    <docs>
      <item path="docs/prd.md" title="Product Requirements Document" section="Project Generation System" snippet="The Directory Structure Generator extends the Project Generation System with comprehensive directory structure generation capabilities."/>
      <item path="docs/architecture.md" title="Architecture Documentation" section="Template Engine Integration" snippet="Directory templates integrate with existing template engine for consistent project generation workflows."/>
      <item path="docs/tech-spec-epic-1.1.md" title="Technical Specification" section="Directory Structure Generator Requirements" snippet="Defines comprehensive requirements for directory structure generation including project type variations and quality standards."/>
    </docs>
    <code>
      <item path="packages/core/src/services/generators/directory-structure-generator.ts" kind="service" symbol="DirectoryStructureGenerator" lines="21-73" reason="Core implementation of directory structure generation with template integration"/>
      <item path="packages/core/src/services/generators/template-generator.ts" kind="service" symbol="TemplateGenerator" lines="21-54" reason="Factory pattern implementation for project-type specific structure generation"/>
      <item path="packages/core/src/types/project-config.ts" kind="type" symbol="ProjectConfig" lines="25-36" reason="Core type definitions for project configuration including quality levels and project types"/>
      <item path="packages/core/src/services/generators/test-file-generator.ts" kind="service" symbol="TestFileGenerator" reason="Handles test file generation as part of directory structure"/>
      <item path="packages/adapters/src/generators/vitest-generator.ts" kind="service" symbol="VitestGenerator" lines="51-83" reason="Testing framework configuration generator integrated with directory structure"/>
    </code>
    <dependencies>
      <ecosystem name="Node.js/Bun">
        <package name="@types/bun" version="^1.3.0" reason="TypeScript support for Bun runtime"/>
        <package name="zod" version="^4.1.12" reason="Schema validation for project configurations"/>
        <package name="vitest" reason="Primary testing framework for generated projects"/>
        <package name="typescript" reason="Core language support for generated projects"/>
      </ecosystem>
      <quality-tools name="Code Quality">
        <package name="@typescript-eslint/eslint-plugin" version="^8.46.1" reason="TypeScript-specific ESLint rules"/>
        <package name="@typescript-eslint/parser" version="^8.46.1" reason="TypeScript parser for ESLint"/>
        <package name="eslint" version="^9.37.0" reason="Code linting and quality checks"/>
        <package name="prettier" version="^3.2.5" reason="Code formatting consistency"/>
        <package name="@stryker-mutator/core" version="^9.2.0" reason="Mutation testing for high quality requirements"/>
      </quality-tools>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint name="SOLID Architecture" description="Directory structure must follow SOLID principles with clear separation of concerns"/>
    <constraint name="File Permissions" description="All directories created with 755 permissions, executables with 755 permissions"/>
    <constraint name="ESLint Compliance" description="Generated code must have zero ESLint violations, no eslint-disable comments allowed"/>
    <constraint name="TypeScript Strict Mode" description="All generated TypeScript files must use strict mode configuration"/>
    <constraint name="Quality Level Integration" description="Structure generation adapts to quality levels (light, medium, strict, high)"/>
    <constraint name="Template Engine Compatibility" description="Must integrate with existing template engine without breaking changes"/>
    <constraint name="Project Type Variations" description="Must support basic, web, cli, library, bun-react, bun-vue, bun-express project types"/>
    <constraint name="AI Assistant Integration" description="Must generate AI assistant context files for supported assistants"/>
    <constraint name="Testing Integration" description="Must generate test structure and configuration matching quality requirements"/>
    <constraint name="Documentation Generation" description="Must generate comprehensive documentation files including README and API docs"/>
  </constraints>
  <interfaces>
    <interface name="DirectoryStructureGenerator.generate" kind="method" signature="generate(config: ProjectConfig): DirectoryItem[]" path="packages/core/src/services/generators/directory-structure-generator.ts:40"/>
    <interface name="TemplateGenerator.generate" kind="method" signature="generate(config: ProjectConfig): DirectoryItem[]" path="packages/core/src/services/generators/template-generator.ts:42"/>
    <interface name="ProjectConfig" kind="interface" signature="interface ProjectConfig { name: string; qualityLevel: ProjectQualityLevel; projectType: ProjectType; aiAssistants: ProjectAIAssistant[]; ... }" path="packages/core/src/types/project-config.ts:25"/>
    <interface name="DirectoryItem" kind="interface" signature="interface DirectoryItem { path: string; type: 'directory' | 'file'; content?: string; }" path="packages/core/src/services/generators/directory-structure-generator.ts:12"/>
    <interface name="VitestGenerator.generate" kind="method" signature="generate(config: ProjectConfig): GeneratedVitestConfig[]" path="packages/adapters/src/generators/vitest-generator.ts:58"/>
  </interfaces>
  <tests>
    <standards>Primary testing framework: Vitest with comprehensive configuration. Quality gates include >90% coverage for strict quality level, mutation testing with Stryker for high quality projects. Testing follows three-tier structure: unit tests (fast, isolated), integration tests (component interaction), and E2E tests (full workflow). All tests must be TypeScript with strict typing and comprehensive edge case coverage. ESLint compliance mandatory in all generated test code.</standards>
    <locations>Unit tests: packages/core/src/services/generators/**/*.test.ts, apps/cli/tests/unit/*.test.ts. Integration tests: apps/cli/tests/integration/*.test.ts. E2E tests: apps/cli/tests/e2e/*.test.ts. Test fixtures: apps/cli/tests/fixtures/*.fixture.ts. Test factories: apps/cli/tests/factories/*.factory.ts. Configuration: vitest.config.ts at project root, test setup in tests/setup.ts.</locations>
    <ideas>AC1: Test directory creation with permission validation across all project types. AC2: Validate entry point file generation with proper content and permissions. AC3: Test configuration file validity (.gitignore, package.json, tsconfig.json, eslint). AC4: Verify documentation content completeness and project-specific customization. AC5: Validate test structure matches source code organization and coverage configuration. AC6: Test project type variations and template customization functionality. Error handling: Test invalid inputs, permission failures, and rollback scenarios. Performance: Verify generation meets <5 seconds requirement.</ideas>
  </tests>
</story-context>